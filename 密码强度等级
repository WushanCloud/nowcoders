题目描述
密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分。

一、密码长度:

5 分: 小于等于4 个字符

10 分: 5 到7 字符

25 分: 大于等于8 个字符

二、字母:

0 分: 没有字母

10 分: 全都是小（大）写字母

20 分: 大小写混合字母

三、数字:

0 分: 没有数字

10 分: 1 个数字

20 分: 大于1 个数字

四、符号:

0 分: 没有符号

10 分: 1 个符号

25 分: 大于1 个符号

五、奖励:

2 分: 字母和数字

3 分: 字母、数字和符号

5 分: 大小写字母、数字和符号

最后的评分标准:

>= 90: 非常安全

>= 80: 安全（Secure）

>= 70: 非常强

>= 60: 强（Strong）

>= 50: 一般（Average）

>= 25: 弱（Weak）

>= 0:  非常弱


对应输出为：

VERY_SECURE

SECURE,

VERY_STRONG,

STRONG,

AVERAGE,

WEAK,

VERY_WEAK,


请根据输入的密码字符串，进行安全评定。

注：

字母：a-z, A-Z

数字：-9

符号包含如下： (ASCII码表可以在UltraEdit的菜单view->ASCII Table查看)

!"#$%&'()*+,-./     (ASCII码：x21~0x2F)

:;<=>?@             (ASCII<=><=><=><=><=>码：x3A~0x40)

[\]^_`              (ASCII码：x5B~0x60)

{|}~                (ASCII码：x7B~0x7E)

接口描述：


Input Param
String pPasswordStr:    密码，以字符串方式存放。

Return Value
根据规则评定的安全等级。



public static Safelevel GetPwdSecurityLevel(String pPasswordStr)
{
/*在这里实现功能*/
return null;
}




输入描述:
输入一个string的密码

输出描述:
输出密码等级

示例1
输入
复制
38$@NoNoNo
输出
复制
VERY_SECURE



#include <vector>
#include <string>
#include <set>
#include <iostream>
using namespace std;

int GetLenth(const string& passwd);
int GetLetter(const string& passwd, int& BigAndSmall);
int GetNumber(const string& passwd);
int GetSymbol(const string& passwd);
int GetAward(const int& BigAndSmall, const int& Symbol, const int& Number);
string& GetPwdSecurityLevel(const string& passwd);

int main()
{
	string passwd;
	while(cin >> passwd)
	    cout << GetPwdSecurityLevel(passwd) << endl;
	return 0;
}

//最后的评分标准 :
//>= 90 : 非常安全
//>= 80 : 安全（Secure）
//>= 70 : 非常强
//>= 60 : 强（Strong）
//>= 50 : 一般（Average）
//>= 25 : 弱（Weak）
//>= 0 : 非常弱
//返回密码评价
string& GetPwdSecurityLevel(const string& passwd)
{
	//密码评价字符串
	static string PwdSec[] = {"VERY_SECURE","SECURE","VERY_STRONG","STRONG","AVERAGE","WEAK","VERY_WEAK"};

	int sum = 0;						//总分
	int BM  = 0;						//大小写字母
	int Let = GetLetter(passwd, BM);	//字母分
	int Num = GetNumber(passwd);		//数字分
	int Sym = GetSymbol(passwd);		//符号分

	sum = GetLenth(passwd) + Let + Num + Sym
		+ GetAward(BM, Sym, Num);

	if (sum >= 90)
		return PwdSec[0];
	if (sum >= 80)
		return PwdSec[1];
	if (sum >= 70)
		return PwdSec[2];
	if (sum >= 60)
		return PwdSec[3];
	if (sum >= 50)
		return PwdSec[4];
	if (sum >= 25)
		return PwdSec[5];
	return PwdSec[6];
}


//一、密码长度 :
//5 分 : 小于等于4 个字符
//10 分 : 5 到7 字符
//25 分 : 大于等于8 个字符
//返回密码长度评价
int GetLenth(const string& passwd)
{
	if (passwd.size() >= 8)
		return 25;
	if (passwd.size() >= 5)
		return 10;
	return 5;
}

//二、字母 :
//0 分 : 没有字母
//10 分 : 全都是小（大）写字母
//20 分 : 大小写混合字母
//返回密码字母评价
int GetLetter(const string& passwd, int& BigAndSmall)
{
	int A = 0, a = 0;
	for (size_t i = 0; i < passwd.size(); i++)
	{
		if (passwd[i] >= 'A' && passwd[i] <= 'Z')
			A = 1;
		else if (passwd[i] >= 'a' && passwd[i] <= 'z')
			a = 1;
		if (A && a)
			break;
	}
	BigAndSmall = A + a;
	if (A && a)
		return 20;
	if (A || a)
		return 10;
	return 0;
}

//三、数字 :
//0 分 : 没有数字
//10 分 : 1 个数字
//20 分 : 大于1 个数字
//返回密码数字评价
int GetNumber(const string& passwd)
{
	int N = 0;
	for (size_t i = 0; i < passwd.size(); i++)
	{
		if (passwd[i] >= '0' && passwd[i] <= '9')
			N++;

	}
	if (N > 1)
		return 20;
	if (N == 1)
		return 10;
	return 0;
}

//四、符号 :
//0 分 : 没有符号
//10 分 : 1 个符号
//25 分 : 大于1 个符号
//返回密码符号评价
int GetSymbol(const string& passwd)
{
	set<char> s;
	for (int i = 0; i < passwd.size(); i++)
	{
		if ((passwd[i] >= 0x21 && passwd[i] <= 0x2F)
			|| (passwd[i] >= 0x3A && passwd[i] <= 0x40)
			|| (passwd[i] >= 0x5B && passwd[i] <= 0x60)
			|| (passwd[i] >= 0x7B && passwd[i] <= 0x7E))
		{
			s.insert(passwd[i]);
		}
	}
	if (s.size() > 1)
		return 25;
	if (s.size() == 1)
		return 10;
	return 0;
}

//五、奖励 :
//2 分 : 字母和数字
//3 分 : 字母、数字和符号
//5 分 : 大小写字母、数字和符号
//返回密码奖励
int GetAward(const int& BigAndSmall, const int& Symbol, const int& Number)
{
	if (Number && BigAndSmall)
	{
		if (Symbol)
		{
			if (BigAndSmall == 2)
				return 5;
			else
				return 3;
		}
		else
		{
			return 2;
		}
	}
	return 0;
}
