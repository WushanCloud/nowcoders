题目描述 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5

/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead == NULL || pHead->next == NULL) return pHead;
        //新的头结点用来链接未重复元素
        ListNode * newnode = new ListNode(0);
        ListNode * newcur = newnode;
        //指向原链表的指针
        ListNode * pcur = pHead->next;
        //设置一个表示重复的记号
        int temp = 0;//0表示当前值没有重复
        while(pcur)
        {
            if(pHead->val == pcur->val)
            {
                temp = 1;
                delete pHead;
                pHead = pcur;
                pcur = pcur->next;
            }
            else if(temp == 1)
            {
                temp = 0;
                delete pHead;
                pHead = pcur;
                pcur = pcur->next;
            }
            else if(temp == 0)
            {
                newcur->next = pHead;
                newcur = newcur->next;
                newcur->next = NULL;
                
                pHead = pcur;
                pcur = pcur->next;
            }
        }
        if(temp == 0)
        {
            newcur->next = pHead;
        }
        newcur = newnode->next;
        delete newnode;
        return newcur;
    }
};

class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead == NULL) return NULL;
        if(pHead->next == NULL)return NULL;
        
        ListNode *newhead = (ListNode*)malloc(sizeof(ListNode));
        newhead->next == NULL;
        ListNode * newcur = newhead;
        
        ListNode * cur = pHead;
        pHead = pHead->next;
        while(pHead)
        {
            if(cur->val == pHead->val)
            {
                pHead = pHead->next;
                while(cur->val == pHead->val)
                {
                    pHead = pHead->next;
                }
                cur = pHead;
                pHead = pHead->next;
            }
            else
            {
                cur->next = newcur->next;
                newcur->next = cur;
                cur = pHead;
                pHead = pHead->next;
            }
        }
        cur = newhead->next;
        free(newhead);
        return cur;
        
        
    }
};