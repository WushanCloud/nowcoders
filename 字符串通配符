题目描述
问题描述：在计算机中，通配符一种特殊语法，广泛应用于文件搜索、数据库、正则表达式等领域。现要求各位实现字符串通配符的算法。
要求：
实现如下2个通配符：
*：匹配0个或以上的字符（字符由英文字母和数字0-9组成，不区分大小写。下同）
？：匹配1个字符


输入：
通配符表达式；
一组字符串。


输出：
返回匹配的结果，正确输出true，错误输出false

输入描述:
先输入一个带有通配符的字符串，再输入一个需要匹配的字符串

输出描述:
返回匹配的结果，正确输出true，错误输出false

示例1
输入
te?t*.*
txt12.xls
输出
false

#include <iostream>
#include <string>

using namespace std;

bool issame(char c1, char c2)
{
	if (c1 == c2)
		return true;
	if (c1 >= 'a' && c1 <= 'z' && c2 >= 'A' && c1 <= 'Z')
	{
		if ((c1 - 'a') == (c2 - 'A'))
			return true;
		else
			return false;
	}
	else if (c1 >= 'A' && c1 <= 'Z' && c2 >= 'a' && c1 <= 'z')
	{
		if ((c1 - 'A') == (c2 - 'a'))
			return true;
		else
			return false;
	}
	return false;
}

bool fun(string& s1, string& s2)
{
	int i = 0, j = 0;
	while (i < s1.size() && j < s2.size())
	{
		if (s1[i] == '?')
		{
			i++;
			j++;
		}
		else if (s1[i] == '*')
		{
			i++;
			while (s1[i] == '?')
				i++;
			if (i < s1.size())
			{
				while (j < s2.size() && !issame(s1[i], s2[j]))
				{
					j++;
				}
				if (j < s2.size() && s1[i] == s2[j])
				{
					int tmp1 = 0, tmp2 = 0;
					int t1 = i, t2 = j;
					while (t1 < s1.size())
					{
						if (s1[t1] == s1[t1 + 1])
						{
							tmp1++;
							t1++;
						}
						else
							break;
					}
					while (t2 < s2.size())
					{
						if (s2[t2] == s2[t2 + 1])
						{
							tmp2++;
							t2++;
						}
						else
							break;
					}
					if (tmp1 <= tmp2)
					{
						i += tmp1;
						j += tmp2;
					}
					else
						return false;
				}
				else
					return false;
			}
			else
				return true;
		}
		else if (issame(s1[i], s2[j]))
		{
			i++;
			j++;
		}
		else
			return false;
	}
	if (i == s1.size() && j == s2.size())
		return true;
	return false;
}

int main()
{
	string s1, s2;
	while (cin >> s1 >> s2)
	{
        if (fun(s1, s2))
            cout << "true" << endl;
        else
            cout << "false" << endl;
	}
	return 0;
}
