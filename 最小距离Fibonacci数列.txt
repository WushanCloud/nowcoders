标题：Fibonacci数列 | 时间限制：1秒 | 内存限制：32768K | 语言限制：不限
Fibonacci数列是这样定义的：
F[0] = 0
F[1] = 1
for each i ≥ 2: F[i] = F[i-1] + F[i-2]
因此，Fibonacci数列就形如：0, 1, 1, 2, 3, 5, 8, 13, ...，在Fibonacci数列中的数我们称为Fibonacci数。给你一个N，你想让其变为一个Fibonacci数，每一步你可以把当前数字X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。
#include<stdio.h>
#include<stdlib.h>
int F(int i)
{
    if(i == 0)
        return 0;
    if(i == 1)
        return 1;
    int f1,f2,f3;
    f1 = 0;
    f2 = 1;
    i--;
    while(i--)
    {
        f3 = f1+ f2;
        f1 = f2;
        f2 = f3;
    }
    return f3;
}
int main()
{
    int min = 1000000;
    int num = 0;
    int n = 0;
    scanf("%d",&n);
    int i = 0;
    while(1)
    {
        num = n-F(i);
        num = abs(num);
        if(num<=min)
        {
            min = num;
            i++;
        }
        else break;
    }
    printf("%d",min);
}