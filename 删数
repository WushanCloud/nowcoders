
有一个数组a[N]顺序存放0~N-1，要求每隔两个数删掉一个数，到末尾时循环至开头继续进行，求最后一个被删掉的数的原始下标位置。以8个数(N=7)为例:｛0，1，2，3，4，5，6，7｝，0->1->2(删除)->3->4->5(删除)->6->7->0(删除),如此循环直到最后一个数被删除。

输入描述:
每组数据为一行一个整数n(小于等于1000)，为数组成员数,如果大于1000，则对a[999]进行计算。


输出描述:
一行输出最后一个被删掉的数的原始下标位置。
示例1
输入
8
输出
6

#include <iostream>
using namespace std;

class MyClass
{
public:
	MyClass(int a = -1, MyClass* next = nullptr)
	{
		_a = a;
		_next = next;
	}
	int _a;
	MyClass* _next;
};

int main()
{
	int n = 0;
	while(cin >> n)
    {
        MyClass* head = new MyClass;
        MyClass* cur = head;

        for (int i = 0; i < n; i++)
        {
            MyClass* newnode = new MyClass(i);
            cur->_next = newnode;
            cur = cur->_next;
        }
        cur->_next = head->_next;
        cur = head->_next;
        delete head;

        while (cur->_next != cur)
        {
            cur = cur->_next;
            MyClass * del = cur->_next;
            cur->_next = cur->_next->_next;
            cur = cur->_next;
            delete del;
        }

        cout << cur->_a<< endl;
    }
	
	return 0;
}
