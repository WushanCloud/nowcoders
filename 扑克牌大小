题目描述
扑克牌游戏大家应该都比较熟悉了，一副牌由54张组成，含3~A，2各4张，小王1张，大王1张。牌面从小到大用如下字符和字符串表示（其中，小写joker表示小王，大写JOKER表示大王）:)
3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如：4 4 4 4-joker JOKER
请比较两手牌大小，输出较大的牌，如果不存在比较关系则输出ERROR

基本规则：
（1）输入每手牌可能是个子，对子，顺子（连续5张），三个，炸弹（四个）和对王中的一种，不存在其他情况，由输入保证两手牌都是合法的，顺子已经从小到大排列；
（2）除了炸弹和对王可以和所有牌比较之外，其他类型的牌只能跟相同类型的存在比较关系（如，对子跟对子比较，三个跟三个比较），不考虑拆牌情况（如：将对子拆分成个子）
（3）大小规则跟大家平时了解的常见规则相同，个子，对子，三个比较牌面大小；顺子比较最小牌大小；炸弹大于前面所有的牌，炸弹之间比较牌面大小；对王是最大的牌；
（4）输入的两手牌不会出现相等的情况。

答案提示：
（1）除了炸弹和对王之外，其他必须同类型比较。
（2）输入已经保证合法性，不用检查输入是否是合法的牌。
（3）输入的顺子已经经过从小到大排序，因此不用再排序了.
输入描述:
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如4 4 4 4-joker JOKER。
输出描述:
输出两手牌中较大的那手，不含连接符，扑克牌顺序不变，仍以空格隔开；如果不存在比较关系则输出ERROR。
示例1
输入
复制
4 4 4 4-joker JOKER
输出
复制
joker JOKER


#include <iostream>
#include <string>
#include <map>
using namespace std;

map<string, int> poker;


void addmap(map<string, int>& m, string s)
{
	int  f = 0;
	while (s != ""){
		f = s.find(' ');
		m[s.substr(0, f)]++;
		s = s.substr(f+1);
	}
}

void isWin(map<string, int>& m1, map<string, int>& m2, int& win)
{
	//判断王
	if (m1.size() == 2 || m2.size() == 2) {
		if (m1.begin()->first == "JOKER") {
			win = 1;
			return;
		}
		else if (m2.begin()->first == "JOKER") {
			win = 2;
			return;
		}
	}
	//判断炸弹
	else if (m1.begin()->second == 4 || m2.begin()->second == 4) {
		if (m1.begin()->second == 4 && m2.begin()->second == 4) {
			if (poker[m1.begin()->first] > poker[m2.begin()->first]) {
				win = 1;
				return;
			}
			else {
				win = 2;
				return;
			}
		}
		else if (m1.begin()->second == 4) {
			win = 1;
			return;
		}
		else if (m2.begin()->second == 4) {
			win = 2;
			return;
		}
	}
	//判断顺子
	else if (m1.size() == 5 && m2.size() == 5) {
		if (poker[m1.begin()->first] > poker[m2.begin()->first]) {
			win = 1;
			return;
		}
		else {
			win = 2;
			return;
		}
	}
	//判断3个
	else if (m1.begin()->second == 3 && m2.begin()->second == 3) {
		if (poker[m1.begin()->first] > poker[m2.begin()->first]) {
			win = 1;
			return;
		}
		else {
			win = 2;
			return;
		}
	}
	else if (m1.begin()->second == 2 && m2.begin()->second == 2) {
		if (poker[m1.begin()->first] > poker[m2.begin()->first]) {
			win = 1;
			return;
		}
		else {
			win = 2;
			return;
		}
	}
	//单牌比较大小
	else if (m1.begin()->second == 1 && m2.begin()->second == 1) {
		if (poker[m1.begin()->first] > poker[m2.begin()->first]) {
			win = 1;
			return;
		}
		else {
			win = 2;
			return;
		}
	}
	else {
		win = 0;
	}
}

int main()
{
	poker["3"] = 0;
	poker["4"] = 1;
	poker["5"] = 2;
	poker["6"] = 3;
	poker["7"] = 4;
	poker["8"] = 5;
	poker["9"] = 6;
	poker["10"] = 7;
	poker["J"] = 8;
	poker["Q"] = 9;
	poker["K"] = 10;
	poker["A"] = 11;
	poker["2"] = 12;
	poker["joker"] = 13;
	poker["JOKER"] = 14;
	map<string, int> m1;
	map<string, int> m2;
	string s;
	while (getline(cin, s))
	{
		size_t s_f = s.find('-');
		string s1 = s.substr(0, s_f);
		string s2 = s.substr(s_f + 1, s.size() - s_f - 1);

		addmap(m1, s1 + ' ');
		addmap(m2, s2 + ' ');

		int win;
		isWin(m1, m2, win);

		if (win == 0)
			cout << "ERROR" << endl;
		else if (win == 1)
			cout << s1 << endl;
		else
			cout << s2 << endl;
	}
	return 0;
}
